AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless patterns - API Gateway to Private HTTP Endpoint via VPC Link

Parameters:
  ServiceName:
    Type: String
    Default: git-service
    Description: A name for the service
  VpcId:
    Type: AWS::EC2::VPC::Id
  PrivateSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
  ImageUrl:
    Type: String
    Description: The url of a docker image that contains the application process that
                 will handle the traffic for this service

Resources:
  LoadBalancerSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: >-
        LoadBalancer Security Group
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId: !Ref VpcId
  LoadBalancerSGEgressToECSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      GroupId: !GetAtt 
        - LoadBalancerSG
        - GroupId
      IpProtocol: tcp
      Description: Target group egress
      DestinationSecurityGroupId: !GetAtt 
        - ECSSecurityGroup
        - GroupId
      FromPort: 80
      ToPort: 80
  ECSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: >-
        ECS Security Group
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: '-1'
      VpcId: !Ref VpcId
  ECSSecurityGroupIngressFromLoadBalancer:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: tcp
      Description: Ingress from Load Balancer
      FromPort: 80
      GroupId: !GetAtt 
        - ECSSecurityGroup
        - GroupId
      SourceSecurityGroupId: !GetAtt 
        - LoadBalancerSG
        - GroupId
      ToPort: 80
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internal
      SecurityGroups:
        - !GetAtt 
          - LoadBalancerSG
          - GroupId
      Subnets: !Ref PrivateSubnetIds
      Type: application
  LoadBalancerListenerTargetGroupECS:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VpcId
  LoadBalancerListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref LoadBalancerListenerTargetGroupECS
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
  ECSFargateCluster:
    Type: 'AWS::ECS::Cluster'
  ECSService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref ECSFargateCluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 2
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: web
          ContainerPort: 80
          TargetGroupArn: !Ref LoadBalancerListenerTargetGroupECS
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !GetAtt 
              - ECSSecurityGroup
              - GroupId
          Subnets: !Ref PrivateSubnetIds
      TaskDefinition: !Ref ECSServiceTaskDefinition
    DependsOn:
      - LoadBalancerListenerTargetGroupECS
      - LoadBalancerListener

  ECSServiceTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: !Ref 'ImageUrl'
          Name: !Ref 'ServiceName'
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
      Cpu: '512'
      ExecutionRoleArn: !GetAtt 
        - ECSTaskExecutionRole
        - Arn
      Memory: '1024'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt 
        - ECSTaskRole
        - Arn
  ECSTaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
  ECSTaskRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
  VpcLink:
      Type: 'AWS::ApiGatewayV2::VpcLink'
      Properties:
          Name: APIGWVpcLinkToPrivateHTTPEndpoint
          SubnetIds: !Ref PrivateSubnetIds
          SecurityGroupIds: []
  APIGWHTTPEndpoint:
      Type: 'AWS::ApiGatewayV2::Api'
      Properties:
          Name: git-app-pvt-endpoint
          ProtocolType: HTTP
  APIGWHTTPEndpointIntegration:
      Type: 'AWS::ApiGatewayV2::Integration'
      Properties:
        ApiId: !Ref APIGWHTTPEndpoint
        IntegrationType: HTTP_PROXY
        ConnectionId: !Ref VpcLink
        ConnectionType: VPC_LINK
        IntegrationMethod: ANY
        IntegrationUri: !Ref LoadBalancerListener
        PayloadFormatVersion: '1.0'
      DependsOn:
      - VpcLink
      - APIGWHTTPEndpoint
      - LoadBalancerListener
  APIGWRoute:
    Type: 'AWS::ApiGatewayV2::Route'
    Properties:
      ApiId: !Ref APIGWHTTPEndpoint
      RouteKey: 'ANY /{proxy+}'
      Target: !Join 
        - /
        - - integrations
          - !Ref APIGWHTTPEndpointIntegration
    DependsOn:
    - APIGWHTTPEndpointIntegration
  APIStageDefault:
    Type: 'AWS::ApiGatewayV2::Stage'
    Properties:
      ApiId: !Ref APIGWHTTPEndpoint
      StageName: $default
      AutoDeploy: true
    DependsOn:
      - APIGWHTTPEndpoint

Outputs:
  APIGWEndpoint:
    Description: API Gateway Endpoint
    Value: !GetAtt APIGWHTTPEndpoint.ApiEndpoint
